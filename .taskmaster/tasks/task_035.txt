# Task ID: 35
# Title: Build Main Dashboard UI
# Status: in-progress
# Dependencies: None
# Priority: high
# Description: Implement the main dashboard UI, including a two-column layout with placeholders for charts and a data table, and a header with account management functionality.
# Details:


# Test Strategy:


# Subtasks:
## 1. Scaffold homePage components with mock placeholders [done]
### Dependencies: None
### Description: Create folder `frontend/src/components/homePage` and add mock components (no logic yet): `PriceChart.tsx`, `SatisfactionChart.tsx`, `SubmissionsTable.tsx`. Export simple placeholders and ensure each has an outer container with an id for in-page navigation: `price-chart`, `satisfaction-chart`, `database`.
### Details:
- Use UI primitives from `frontend/src/components/ui` where possible (e.g., `card`, `table`, `button`) and apply styles in parent. 
- Files to create:
  - `frontend/src/components/homePage/PriceChart.tsx`
  - `frontend/src/components/homePage/SatisfactionChart.tsx`
  - `frontend/src/components/homePage/SubmissionsTable.tsx`
- Each component should render a simple heading and placeholder content; no data wiring yet.
- Ensure exports are default named components.


## 2. Scaffold layout components used across all pages [done]
### Dependencies: None
### Description: Create folder `frontend/src/components/layout` and add layout components: `Header.tsx`, `Footer.tsx`, `Error.tsx`, `Sidebar.tsx`. No complex logic yet.
### Details:
- Use primitives from `frontend/src/components/ui` where possible; keep styling light and override in parent.
- Files to create:
  - `frontend/src/components/layout/Header.tsx`
  - `frontend/src/components/layout/Footer.tsx`
  - `frontend/src/components/layout/Error.tsx`
  - `frontend/src/components/layout/Sidebar.tsx`
- Integrate later in `frontend/src/app/layout.tsx`.


## 3. Implement Header with navigation and auth controls [done]
### Dependencies: None
### Description: Build `Header.tsx` with SmartTutor logo (left), three buttons (Price Chart, Satisfaction Chart, Database) linking to homepage anchors, and account controls on the right (login/register when logged out; Google avatar + logout when logged in). Add language dropdown (English only for now). Refactor app to use this header globally.
### Details:
- File: `frontend/src/components/layout/Header.tsx`; import primitives from `frontend/src/components/ui` (e.g., `button`, `dropdown-menu`, `avatar`).
- Nav buttons link to `/#price-chart`, `/#satisfaction-chart`, `/#database`.
- Auth state derives from existing `AuthProvider` in `frontend/src/components/providers/auth-provider.tsx`.
- Expose callback props for onLogin/onLogout; implement client-side links only.
- Update `frontend/src/app/layout.tsx` to render `<Header />` above `{children}`.

## 4. Implement Price Bar Chart component with fixed ranges [done]
### Dependencies: None
### Description: Create `PriceChart.tsx` to display counts of price-per-hour in fixed ranges: 0-50, 50-100, 100-150, 150-200, 200+.
### Details:
- File: `frontend/src/components/homePage/PriceChart.tsx`.
- Accept props: `prices: number[]` (optional; default []) and compute bins accordingly.
- Render accessible bar chart using UI components (`card`, `table`, or simple div bars) without introducing new chart libs yet.
- Provide aria labels and color contrast; handle empty state.


## 5. Enhance Header UI and layout [done]
### Dependencies: None
### Description: Polish header styling and layout: sticky top bar, backdrop blur, proper padding/gap, hover/focus styles, and improved spacing. Keep using components from frontend/src/components/ui.
### Details:
- Add sticky header with top-0 z-40, backdrop-blur and border.
- Improve logo typography and spacing.
- Use Button variants consistently with accessible focus rings.
- Ensure dark mode readiness via Tailwind tokens.
- Keep styles minimal in component and override in parent if needed.

## 6. Implement section navigation and scroll behavior [in-progress]
### Dependencies: None
### Description: Make header nav buttons scroll smoothly to homepage anchors and highlight active section (scrollspy).
### Details:
- Buttons link to /#price-chart, /#satisfaction-chart, /#database.
- Add smooth scroll behavior and offset for sticky header.
- Track active section with IntersectionObserver; set aria-current and selected states.
- Ensure keyboard activation works and focus is managed.

## 7. Add mobile navigation and accessibility [cancelled]
### Dependencies: None
### Description: Add a mobile menu for the header with proper a11y and keyboard support.
### Details:
- Use Sheet/Dialog from ui for mobile nav; toggle via a menu button with aria-controls/expanded.
- Trap focus when open; close on route change and Esc.
- Provide a skip-to-content link for accessibility.
- Ensure aria-labels and aria-current are set appropriately.

## 8. Wire auth actions, loading, and error handling [done]
### Dependencies: None
### Description: Make login/register/logout functional with user feedback and robust states.
### Details:
- Hook up onLogin/onLogout actions using Supabase OAuth and signOut.
- Show loading states on buttons; handle and toast errors.
- Render Google avatar/email when logged in; show Register/Login when logged out.
- Keep logic in Header; consider extracting small hooks if it grows.
<info added on 2025-09-01T20:26:32.519Z>
- Remove any automatic anonymous sign-in logic from AuthProvider/useAuth; do not create a session on mount. Rely only on supabase.auth.getSession() and supabase.auth.onAuthStateChange for session state.
- Change onLogin to use supabase.auth.signInWithOAuth({ provider: 'google', options: { redirectTo: <app-url> } }) with loading and error toasts; no fallback to anonymous or email/password.
- Update Header to show a single "Login with Google" button when session is null; remove Register/guest options.
- On logout, call supabase.auth.signOut(), immediately clear local session state, and render the Login button.
- QA: verify initial load shows no session and the Login button; after Google OAuth, avatar/email display; after logout, session is cleared and Login button reappears; confirm no anonymous sessions are created at any point.
</info added on 2025-09-01T20:26:32.519Z>
<info added on 2025-09-01T20:38:12.963Z>
- Logged-out UI: render two side-by-side buttons in the Header â€” "Login with Google" and "Register".
- Add onRegister handler that triggers the same Google OAuth flow but with an explicit consent prompt:
  - supabase.auth.signInWithOAuth({ provider: 'google', options: { redirectTo: <app-url>, prompt: 'consent' } })
- Keep onLogin as-is (Google OAuth with redirectTo only). Both buttons must share loading/error handling; when either is in a loading state, disable both buttons and show appropriate toasts.
- Do not add any anonymous or email/password fallbacks.
- QA:
  - Initial load (no session) shows both Login and Register buttons.
  - Clicking Login redirects to Google and returns to the app with the expected session; avatar/email render.
  - Clicking Register opens Google with an explicit consent/account prompt even if already signed in to a Google account in the browser; upon completion, avatar/email render.
  - After logout, both buttons reappear; no anonymous sessions are created at any point.
</info added on 2025-09-01T20:38:12.963Z>

## 9. Create left Sidebar component replacing header navigation [done]
### Dependencies: None
### Description: Build a fixed left sidebar using shadcn/ui primitives; include logo at top and section links (Price Chart, Satisfaction Chart, Data) with icons. Persist on all pages.
### Details:


## 10. Integrate Sidebar into global layout and adjust content area [done]
### Dependencies: None
### Description: Update `frontend/src/app/layout.tsx` to render the Sidebar and a main content area with responsive padding/margins. Remove old header usage.
### Details:


## 11. Move language and auth controls to sidebar bottom [done]
### Dependencies: None
### Description: Place language selector and login/register/logout controls at the bottom of the sidebar with proper accessibility and states.
### Details:


## 12. Increase contrast and establish reusable grey theme [done]
### Dependencies: None
### Description: Define reusable grey background and contrasting link text tokens in `globals.css` (CSS variables) or shadcn theme config; apply to sidebar.
### Details:


## 13. Add Google Sirivennela font and apply to brand label [done]
### Dependencies: None
### Description: Load Sirivennela from Google Fonts globally and use a .font-display utility for the brand text in Sidebar.
### Details:


## 14. Refactor fonts to next/font in shared module; bold brand label [done]
### Dependencies: None
### Description: Create `frontend/src/lib/fonts.ts` exporting Geist, Geist_Mono, and Sirivennela via next/font. Update layout to consume these and remove <link> tags; set brand label to bold.
### Details:


## 15. Wire Sirivennela font globally and apply to sidebar brand [done]
### Dependencies: None
### Description: Fix :root selector in globals.css, ensure --font-display set, and apply to SmartTutor label with bold weight.
### Details:


## 16. Create mobile-specific header component [done]
### Dependencies: None
### Description: Create a responsive header for phone sizes, showing logo and title left, with language/auth controls right. This will be hidden on larger screens where the sidebar is visible.
### Details:


## 17. Adjust mobile header padding to align with app container [done]
### Dependencies: None
### Description: Update `MobileHeader.tsx` to ensure its content aligns with the main app's container padding. Instead of a full-width header with internal padding, the header bar should remain full-width, but its inner `div` should use the same container class or padding values as the main content area for consistent alignment on mobile devices.
### Details:
<info added on 2025-09-01T20:11:08.810Z>
- Introduce a single shared container utility or component (e.g., app-container: mx-auto w-full max-w-7xl px-4 sm:px-6 lg:px-8) to standardize horizontal padding across the app.
- Refactor Layout.tsx so the header bar remains full-width (sticky, bg, shadow), but its inner content is wrapped with the shared app-container. Apply the same app-container to the main content wrapper. Remove container/px classes from the existing nav/header inner div.
- Update MobileHeader.tsx to remove all internal padding/container classes. Ensure its inner content is rendered inside the app-container provided by Layout so it aligns with the main content area.
- Remove per-component horizontal padding/container classes from dashboard children (e.g., Charts, DataTable, Filters, KPI/Stats, Sidebar sections) so they inherit alignment from the shared app-container.
- Preserve vertical spacing with gap/py utilities on sections as needed; only horizontal padding should be centralized.
- If any component must be full-bleed, explicitly opt it out with a full-bleed wrapper or negative margins while keeping others aligned to the container.
- QA: Verify header content and main content align at all breakpoints, no double padding, no horizontal scroll on mobile, and consistent max-width behavior.
</info added on 2025-09-01T20:11:08.810Z>

